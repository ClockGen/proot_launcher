#!/data/data/com.termux/files/usr/bin/bash

#----------------------------------------------------------------------------
#"THE BEER-WARE LICENSE" (Revision 42):
#<Buka> wrote this file.  As long as you
#retain this notice you can do whatever you want with
#this stuff. If we meet some day, and you think this
#stuff is worth it, you can buy me a beer in return.
#Buka
#----------------------------------------------------------------------------

#Warning! the following code is a giant pile
#of procedural code that was just getting added
#when a need appeared. Itâ€™s not pretty.

########################
#Default Variables
########################

initVars(){
PRES="720x1280"
EDIR=""
BINDDIR="/data/data/com.termux/files/home/arch"
ACTIVITY="com.iiordanov.freebVNC/com.iiordanov.bVNC.bVNC"
DISPLAYID=":0"
SHCOMM="bash -i"
DECMD="openbox-session & pcmanfm --desktop & lxpanel"
BINLIST="gimp inkscape libreoffice geany"
PRPATH="$(readlink -f $0)"
blist="\
tigervnc openbox lxpanel lxtask lxappearance \
lxappearance-obconf pcmanfm adwaita-icon-theme \
noto-fonts lilyterm gpicview \
leafpad file-roller unrar p7zip unzip zip \
gtk-engines gtk-engine-murrine openbox-themes \
lxhotkey ffmpegthumbnailer \
"
}

########################
#Common functions
########################

prn(){
printf "%b\n" "$1"
}

prs(){
printf "%b" "$1"
}

mute(){
if [[ -n $PDEBUG ]]
then
    "$@"
else
    "$@" >/dev/null 2>/dev/null
fi
}

chkPerm(){
while [[ ! $(ls /sdcard) && $(type -P termux-setup-storage) ]]
do
    termux-setup-storage
done
}

checkConn(){
if [[ ! $(ping -w 10 -c 2 8.8.8.8) ]]
then
    prn "Check your internet connection."
    exit
fi
}

errchk(){
if [[ $? != 0 ]]
then
    prn "Something went wrong."
    exit
fi
}

getSDPath(){
for i in $(ls /storage)
do
    if [[ $i =~ ^[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}$ ]]
    then
        EDIR="/storage/$i"
        prn "Detected sdcard path: ${CRED}$EDIR${CDEF}\n"
        fi
done
}

checkPkg(){
while [[ ! -f /data/data/com.termux/files/usr/bin/$1 ]]
do
    prs "You need $1, install it now? (y/n):"
    read inp
    case "$inp" in
        [Yy])
        checkConn
        apt-get update
        apt-get -y install $1
        errchk
    ;;
        *)
        prn "Use ${CRED}\"pkg install $1\"${CDEF} to install it manually."
        exit
        ;;
    esac
done
}

printHelp(){
less "${PRPATH}help"
}

sourceCfg(){
source "/data/data/com.termux/files/home/.prootrc"
}

setArgs(){
BINARR=( ${BINLIST} )
for i in "${!BINARR[@]}"
do
    prn "$(( i+1 ))) ${CRED}${BINARR[$i]}${CDEF}"
done
read inp
if [[ $inp =~ ^[1-"${#BINARR[@]}"]$ ]]
then
    BINCMD="${BINARR[$(( $inp-1 ))]}"
    prn "Using ${CRED}$BINCMD${CDEF}..."
else
    prn "Wrong input"
    exit
fi
CARG="$BINCMD \"$ARGS\""
}

########################
#Container functions
########################

killVNC(){
if $(mute vncserver -kill "$DISPLAYID")
then
    prn "VNC server stopped..."
else
    if $(mute pgrep "Xvnc")
    then
        prn "Could not stop vnc properly, trying to kill..."
        pkill "Xvnc"
    fi
fi
}

checkXvnc(){
if $(mute pgrep "Xvnc")
then
    prs "VNC server is already running, restart? (y/n):"
    read inp
    case "$inp" in
        [YUyu])
        killVNC
        ;;
        *)
        prn "Not restarting..."
        exit
        ;;
    esac
else
    mute rm /tmp/.X0-lock
    mute rm /tmp/.X11-unix/X0
fi
}

startVNC(){
SERVPORT=$((5900 + ${DISPLAYID:1}))
if $(mute vncserver "$DISPLAYID" -depth 24 -geometry "$PRES")
then
    prn "New VNC server is started as ${CRED}localhost:${SERVPORT}${CDEF}\n\
Connect to this address with your vnc client"
else
    prn "${CRED}Something went wrong.\nInitialize PDEBUG variable and run the script again.${CDEF}"
fi
}

startDE(){
prs "Start VNC, connect to Xserver XSDL or open a shell? (v/x/s):"
read inp
case "$inp" in
    [Vv])
    if [[ $(type -P "vncserver") ]]
    then
        while [[ ! -f ~/.vnc/passwd ]]
        do
            prs "Setup VNC passwod (y/n):"
            read inp
            case "$inp" in
                [Yy])
                vncpasswd
                ;;
                *)
                prn "Exiting..."
                exit
                ;;
            esac
        done
        prn "Starting VNC and specified autostart command. Use ${CRED}Ctrl+C${CDEF} to kill the session."
        export DISPLAY="$DISPLAYID"
        checkXvnc
        startVNC
        mute eval "$DECMD"
        killVNC
        exit
    else
        prs "Vncserver is not found in path. Press \"b\" to install base system (openbox+lxde parts). \"c\" to cancel (b/c):"
        read inp
        case "$inp" in
            [Bb])
            checkConn
            pacman-key --init
            errchk
            pacman-key --populate archlinuxarm
            errchk
            pacman --noconfirm -Syu
            errchk
            pacman --noconfirm -S $blist
            errchk
            ;;
            *)
            prn "Use shell mode to install vncserver and other parts manually."
            ;;
        esac
        exit
    fi
    ;;
    [Xx])
        export PULSE_SERVER=tcp:127.0.0.1:4712
        export DISPLAY=:0
        prn "Connecting to Xserver XSDL..."
        mute eval "$DECMD"
    ;;
    *)
    prn "Opened proot shell. Use ${CRED}\"exit\"${CDEF} to return to termux shell."
    ${SHCOMM}
    ;;
esac
}

startContainer(){
if [[ -z "$CARG" ]]
then
    startDE
else
    export DISPLAY="$DISPLAYID"
    if $(mute pgrep "Xvnc")
    then
        printf "Program started in already running DE session\n"
        mute eval "$CARG"
        exit
    else
        printf "${CRED}Closing the app will close this session${CDEF}\n"
        startVNC
        mute eval "$DECMD & $CARG"
        killVNC
        exit
    fi
fi
}

########################
#Container starting
########################

startProot(){

unset LD_PRELOAD

checkPkg proot

if [[ ! -f "$BINDDIR/usr/bin/env" ]]
then
    prn "It appears that path container is empty.\nUse ${CRED}--install${CDEF} argument first."
    exit
fi

proot --link2symlink -0 -r "$BINDDIR"   \
-b /system -b /dev/ -b /sys/ -b /proc/  \
-b /sys/fs/selinux/                     \
-b /data/data/com.termux/files/home/    \
-b /sdcard/ -b "$EDIR" /usr/bin/env     \
-i HOME=/root TERM="xterm-256color"     \
PDEBUG="$PDEBUG" CARG="$CARG"           \
PATH=/bin:/usr/bin:/sbin:/usr/sbin:/bin \
/bin/bash "$PRPATH" "--startcon"
}

########################
#Arch install
########################

installDistro(){
checkConn
checkPkg bsdtar
checkPkg wget
ARCH=$(uname -m)
DISTLINK="http://os.archlinuxarm.org/os/ArchLinuxARM-$ARCH-latest.tar.gz"
ARCHPATH="$BINDDIR/../${DISTLINK##*/}"
if [[ ! $ARCH =~ ^(aarch64|arm64|armv7)$ ]]
then
    prn "Detected architecture (${CRED}$ARCH${CDEF}) is not supported."
    exit
elif [[ -d $BINDDIR ]]
then
    if [[ $(ls -A $BINDDIR) ]]
    then
        prn "Target directory is not empty, clear it now?\n${CRED}ALL DATA WILL BE REMOVED!${CDEF}\n(type \"YES\" to confirm):"
        read inp
        case "$inp" in
            "YES")
            rm -rf "$BINDDIR/*"
            ;;
            *)
            exit
            ;;
        esac
    fi
else
    prn "$BINDDIR does not exist, creating..."
    mkdir -p "$BINDDIR"
fi
prn "Downloading archlinuxarm archive md5 sum..."
wget "$DISTLINK.md5" -O "$ARCHPATH.md5"
errchk
cd "$BINDDIR/../"
while ! (md5sum -c "$BINDDIR/../${DISTLINK##*/}.md5")
do
    prn "Downloading archlinuxarm rootfs archive..."
    wget "$DISTLINK" -O "$BINDDIR/../${DISTLINK##*/}"
    errchk
done
mute cd -
prs "Extracting rootfs archive..."
mute bsdtar -xpf "$BINDDIR/../${DISTLINK##*/}" -C "$BINDDIR"
prn "${CRED}Done.${CDEF}"
prs "Removing unnecessary stuff from rootfs..."
rm -rf "$BINDDIR/boot"rm -rf "$BINDDIR/usr/lib/firmware"
rm -rf "$BINDDIR/usr/lib/modules"
rm "$BINDDIR/etc/resolv.conf"
printf "nameserver 8.8.8.8" > "$BINDDIR/etc/resolv.conf"
prn "${CRED}Done.${CDEF}"
}

########################
#Configuration
########################

setup(){
prn "Welcome to configuration wizard.\nLeaving fields blank will use default values (recommended).\nRefer to ${CRED}--help${CDEF} if you did not already.\n"
prs "Enter VNC screen resolution:"
read inp
if [[ $inp =~ ^[0-9]{3,4}x[0-9]{3,4}$ ]]
then
    PRES="$inp"
    prn "Using:${CRED}$PRES${CDEF}\n"
else
    prn "Using default:${CRED}$PRES${CDEF}\n"
fi
prs "Enter VNC display number without \":\":"
read inp
if [[ $inp =~ ^[0-9]{1,4}$ ]]
then
    DISPLAYID=":$inp"
    prn "Using:${CRED}$DISPLAYID${CDEF}\n"
else
    prn "Using default:${CRED}$DISPLAYID${CDEF}\n"
fi
prs "Enter installation path (relative to termux home):"
read inp
if [[ -n $inp ]]
then
    BINDDIR="/data/data/com.termux/files/home/$inp"
    prn "Using:${CRED}$BINDDIR${CDEF}\n"
else
    prn "Using default:${CRED}$BINDDIR${CDEF}\n"
fi
prs "Enter shell name (and arguments) to autostart:"
read inp
if [[ -n $inp ]]
then
    SHCOMM="$inp"
    prn "Using:${CRED}$SHCOMM${CDEF}\n"
else
    prn "using default:${CRED}$SHCOMM${CDEF}\n"
fi
prs "Enter commands to autostart (for example, a DE),\nseparated by an ampersand sign (&).\nDon't put the sign after the last command:"
read inp
if [[ -n $inp ]]
then
    DECMD="$inp"
    prn "Using:${CRED}$DECMD${CDEF}\n"
else
    prn "Using default:${CRED}$DECMD${CDEF}\n"
fi
prs "Enter list of binaries for quick open, separated by space:"
read inp
if [[ -n $inp ]]
then
    BINLIST="$inp"
    prn "Using:${CRED}$BINLIST${CDEF}\n"
else
    prn "Using default:${CRED}$BINLIST${CDEF}\n"
fi
getSDPath
prn "Writing configuration file to ~/.prootrc..."
echo "\
PRES="\"$PRES\""
EDIR="\"$EDIR\""
BINDDIR="\"$BINDDIR\""
ACTIVITY="\"$ACTIVITY\""
DISPLAYID="\"$DISPLAYID\""
SHCOMM="\"$SHCOMM\""
DECMD="\"$DECMD\""
BINLIST="\"$BINLIST\""
" > "/data/data/com.termux/files/home/.prootrc"
prs "Create symlink to termux-file-editor for quick file opening? (enter for yes):"
read inp
if [[ -z $inp ]]
then
    if [[ -f /data/data/com.termux/files/home//bin/termux-file-editor ]]
    then
        prn "Moving old termux-file-editor to backup..."
        mv "${HOME}/bin/termux-file-editor" "${HOME}/bin/termux-file-editor.bak"
    fi
    mkdir -p "${HOME}/bin"
    ln -s "$(readlink -f $0)" "${HOME}/bin/termux-file-editor"
fi
}

#######################
#Main section
#######################

CRED='\033[0;31m'
CDEF='\033[0m'

if [[ ! ($# =~ ^[0-1]$) ]]
then
    prn "Wrong number of arguments"
    exit
fi

chkPerm

if [[ ! -f /data/data/com.termux/files/home/.prootrc ]]
then
    prn "Hello. Either this is the first run, \
or the config file is missing."
initVars
setup
fi

case "$1" in
    "")
        initVars
        sourceCfg
        prn "To get more information, use ${CRED}--help${CDEF}."
        startProot
    ;;
    "--help"|"-h")
        printHelp
    ;;
    "--install"|"-i")
        initVars
        sourceCfg
        installDistro "$@"
    ;;
    "--setup"|"-s")
        initVars
        setup
    ;;
    "--startcon")
        initVars
        sourceCfg
        startContainer
    ;;
    --*|-*)
        prn "Unknown argument ${CRED}$1${CDEF}.\nUse ${CRED}--help${CDEF} to display help."
    ;;
    *)
        initVars
        sourceCfg
        ARGS="$@"
        setArgs
        mute am start --user 0 "$ACTIVITY"
        startProot
    ;;
esac
